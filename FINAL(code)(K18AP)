#include<stdio.h> 
 
int main() 
{ 
      int i,j, process, total = 0, counter = 0, time_quantum = 10, x; 
      
	  int wait_time = 0, turnaround_time = 0,p[20],pos ,priority[20], avg_time[20], burst_time[20], temp[20],var1,var2; 
      
	  float average_waiting_time = 0.0, average_turnaround_time = 0.0;
	  
	  printf("\n quantum time of process: %d",time_quantum);
      
	  printf("\nEnter Total Number of Processes:"); 
	  //enter number of processes user wants to store in ready queue;
      
	  scanf("%d", &process); 
      
	  x = process; 
      for(i = 0; i < process; i++) 
      {
	    p[i]=i+1;
	   
	    priority[i]=0;
            printf("\nEnter total Details of Process[%d]\n", i + 1);
            printf("Arrival Time of process:\t");
            scanf("%d", &avg_time[i]);
            printf("burst Time of process:\t");
            scanf("%d", &burst_time[i]); 
            temp[i] = burst_time[i];
      }
	   
      printf("\nProcess ID\t\t Burst Time\t Turnaround Time\t Waiting Time\t priority\n");
      for(total = 0, i = 0; x != 0;) 
      { 

		    for(var1=0;var1<process;var1++)
		    {
			int temp1;
			pos=var1;
			for(j=var1+1;j<process;j++)
			{
			    if(priority[j]<priority[pos])
				pos=j;
			}
		 
		temp1=priority[var1];
	
		priority[var1]=priority[pos];
	
		priority[pos]=temp1;
		 
			temp1=burst_time[var1];
			burst_time[var1]=burst_time[pos];
			burst_time[pos]=temp1;
		 			temp1=avg_time[var1];
				avg_time[var1]=avg_time[pos];
			avg_time[pos]=temp1;

			temp1=p[var1];
				p[var1]=p[pos];
			p[pos]=temp1;

			temp1=temp[var1];
				temp[var1]=temp[pos];
			temp[pos]=temp1;
		    }
		
            
			if(temp[i] <= time_quantum && temp[i] > 0) 
            { 
                  total = total + temp[i]; 
                  temp[i] = 0; 
                  counter = 1; 
            } 
            
			else if(temp[i] > 0) 
            { 
                  temp[i] = temp[i] - time_quantum; 
                  total = total + time_quantum; 
            } 

	for(var2=0;var2<process;var2++)
		{
		   //calculating the priority of processes entered;
			if(var2==i)
			priority[var2]+=1;
			else
			priority[var2]+=2;
		}

            if(temp[i] == 0 && counter == 1) 
            { 
                  x--; 
                  printf("\nProcess[%d]\t\t%d\t\t %d\t\t %d\t\t%d", p[i], burst_time[i], total - avg_time[i], total - avg_time[i] - burst_time[i],priority[i]);
				  
                  wait_time = wait_time + total - avg_time[i] - burst_time[i]; 
				  //calculating waiting time
                  turnaround_time = turnaround_time + total - avg_time[i]; 
				  //calculating turn around time
                  counter = 0; 
            } 
            if(i == process - 1) 
            {
                  i = 0; 
            
			}
            else if(avg_time[i + 1] <= total) 
            {
                  i++;
            
			}
            else 
            {
                  i = 0;
            
			}		
      } 
      return 0; 
}
